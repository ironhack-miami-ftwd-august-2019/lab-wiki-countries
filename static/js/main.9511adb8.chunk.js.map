{"version":3,"sources":["logo.svg","Details.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Details","findCountry","id","countries","find","theCountry","cca3","flag","getBorders","borders","map","eachBorder","i","country","_this","console","log","react_default","a","createElement","key","react_router_dom","to","concat","name","common","this","props","match","params","bighairygorilla","nation","className","official","style","width","capital","area","Component","App","showCountries","eachCountry","react","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4MCiEzBC,6MA3DbC,YAAc,SAACC,GACb,OAAOC,EAAUC,KAAK,SAAAC,GAClB,OAAOA,EAAWC,OAASJ,GAAMG,EAAWE,OAASL,OAI3DM,WAAa,SAACC,GACZ,OAAOA,EAAQC,IAAI,SAACC,EAAYC,GAC5B,IAAIC,EAAUC,EAAKb,YAAYU,GAE/B,OADAI,QAAQC,IAAIH,GAERI,EAAAC,EAAAC,cAAA,MAAIC,IAAKT,GACLM,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,mBAAAC,OAAqBZ,IACxBE,EAAQN,KADb,IACoBM,EAAQW,KAAKC,oFAQ7C,IAAIvB,EAAKwB,KAAKC,MAAMC,MAAMC,OAAOC,gBAE7BC,EAASL,KAAKzB,YAAYC,GAI9B,OACEe,EAAAC,EAAAC,cAAA,OAAKa,UAAU,SACbf,EAAAC,EAAAC,cAAA,UAAKY,EAAOP,KAAKS,UACjBhB,EAAAC,EAAAC,cAAA,SAAOa,UAAU,SACff,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIe,MAAO,CAAEC,MAAO,QAApB,WACAlB,EAAAC,EAAAC,cAAA,UAAKY,EAAOK,UAEdnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,UACGY,EAAOM,KADV,MAEEpB,EAAAC,EAAAC,cAAA,kBAGJF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACKO,KAAKlB,WAAWuB,EAAOtB,sBAlDtB6B,oBC8CPC,6MAvCbC,cAAgB,WAQd,OAPmBrC,EAAUO,IAAI,SAAC+B,EAAa7B,GAC7C,OACAK,EAAAC,EAAAC,cAAA,MAAIC,IAAKR,EAAGoB,UAAU,0CACpBf,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAE,mBAAAC,OAAqBkB,EAAYlC,OAASkC,EAAYjB,KAAKC,OAAnE,IAA4EgB,EAAYlC,kFAQ5F,OAEEU,EAAAC,EAAAC,cAACuB,EAAA,SAAD,KAGAzB,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAAA,OAAKa,UAAU,SAAf,OAEGN,KAAKc,iBAIRvB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACE1B,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,mCAAmCC,UAAW9C,cA3BxDsC,aCCES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,iECJNuB,IAASC,OACLnC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACkC,EAAD,OAEJC,SAASC,eAAe,SDyGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9511adb8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport {Link} from  'react-router-dom';\nimport countries from \"./countries\";\n\nclass Details extends Component {\n\n  findCountry = (id) => {\n    return countries.find(theCountry => {\n        return theCountry.cca3 === id || theCountry.flag === id ;\n      });\n  }  \n  \n  getBorders = (borders) => {\n    return borders.map((eachBorder, i)=>{\n        let country = this.findCountry(eachBorder);\n        console.log(country)\n        return(\n            <li key={eachBorder}>\n                <Link to={`/country-detail/${eachBorder}`}>\n                    {country.flag} {country.name.common}\n                </Link>\n            </li>\n            )\n    })\n  }\n\n  render() {\n    let id = this.props.match.params.bighairygorilla;\n\n    let nation = this.findCountry(id)\n\n\n\n    return (\n      <div className=\"col-7\">\n        <h1>{nation.name.official}</h1>\n        <table className=\"table\">\n          <thead></thead>\n          <tbody>\n            <tr>\n              <td style={{ width: \"30%\" }}>Capital</td>\n              <td>{nation.capital}</td>\n            </tr>\n            <tr>\n              <td>Area</td>\n              <td>\n                {nation.area} km\n                <sup>2</sup>\n              </td>\n            </tr>\n            <tr>\n              <td>Borders</td>\n              <td>\n                <ul>\n                    {this.getBorders(nation.borders)}\n                </ul>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Details;\n","import React, {Component, Fragment} from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport countries from \"./countries\";\nimport { Link } from \"react-router-dom\"\nimport Details from \"./Details.js\"\nimport { Switch, Route } from 'react-router-dom';\n\n\nclass App extends Component {\n\n  showCountries = () => {\n    let allCountries = countries.map((eachCountry, i) => {\n      return (\n      <li key={i} className=\"list-group-item list-group-item-action\">\n        <Link to={`/country-detail/${eachCountry.flag}`}>{eachCountry.name.common} {eachCountry.flag}</Link>\n      </li>\n      )\n    })\n    return allCountries;\n  }\n\n  render() {\n    return (\n\n      <Fragment>\n\n      {/* List and Details */}\n      <div className=\"row\">\n        <div className=\"col-5\">\n          List\n          {this.showCountries()}\n        </div>\n\n        {/* Our Switch and Route */}\n        <Switch>\n          <Route exact path='/country-detail/:bighairygorilla' component={Details}/>\n        </Switch>\n\n      </div>\n\n\n\n\n      </Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}